openapi: 3.0.3
info:
  title: Ecart Application
  version: 1.0.0
  description: Sample application to fetch Items and prices
paths:
  /api/v1/items/:
    get:
      operationId: api_v1_items_list
      description: ''
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
          description: ''
  /api/v1/items/price/:
    post:
      operationId: api_v1_items_price_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemsTotalPrice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ItemsTotalPrice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ItemsTotalPrice'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsTotalPrice'
          description: ''
  /api/v1/items/{id}/:
    get:
      operationId: api_v1_items_retrieve
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this item.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: ''
  /api/v1/login/:
    post:
      operationId: api_v1_login_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /api/v1/login/refresh/:
    post:
      operationId: api_v1_login_refresh_create
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/register/:
    post:
      operationId: api_v1_register_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
components:
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        price:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        description:
          type: string
          nullable: true
          maxLength: 500
      required:
      - name
    ItemsTotalPrice:
      type: object
      properties:
        items:
          type: array
          items:
            type: integer
      required:
      - items
    MyTokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    Register:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\Z
          maxLength: 150
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
      - password
      - password2
      - email
      - first_name
      - last_name
